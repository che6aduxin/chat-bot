from flask import Flask, request
import requests
import os
import openai
import yclients
from yclients import YClientsAPI

app = Flask(__name__)

# üì¶ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ Railway)
GREEN_API_ID = os.getenv("GREEN_API_ID")
GREEN_API_TOKEN = os.getenv("GREEN_API_TOKEN")
OPENAI_API_TOKEN = os.getenv("OPENAI_API_TOKEN")

YCLIENTS_API_TOKEN = os.getenv("YCLIENTS_API_TOKEN")
YCLIENTS_COMPANY_ID = ""
YCLIENTS_FORM_ID = ""

openai.api_key = OPENAI_API_TOKEN

api = YClientsAPI(token=YCLIENTS_API_TOKEN, company_id=YCLIENTS_COMPANY_ID, form_id=YCLIENTS_FORM_ID, debug=TRUE)


def get_booking_dates(staff_id, service_id):
     booking_days = api.get_available_days(staff_id=staff_id, service_id=service_id)
     print(booking_days)
     day = booking_days['data'].get('booking_dates')
     return day


def get_booking_times(staff_id, service_id, day):
     time_slots = api.get_available_times(staff_id=staff_id, service_id=service_id, day=day)
     print(time_slots)
     date_time = time_slots['data'].get('time')
     return date_time


def book(name, phone, email, service_id, date_time, staff_id, comment):
     booked, message = api.book(booking_id=0, 
     fullname=name, 
     phone=phone, 
     email=email, 
     service_id=service_id, 
     date_time=date_time, 
     staff_id=staff_id, 
     comment=comment)
     return "Booked"

def get_staff_info():
     all_staff = api.get_staff()
     print(all_staff)
     staff_id = all_staff['data'].get('id')
     return staff_id


def get_services_info(staff_id):
     services = api.get_services(staff_id=staff_id)
     print(services)
     service_id = services['data']['services'].get('id')
     return service_id


def find_book_request_in_message(user_message):
     try:
        prompt = str("–ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –∂–µ–ª–∞–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∫—É—é-—Ç–æ —É—Å–ª—É–≥—É, –Ω–∞–ø–∏—à–∏, –∫–∞–∫—É—é —É—Å–ª—É–≥—É —Ö–æ—á–µ—Ç –∫–ª–∏–µ–Ω—Ç, –æ—Ç –∫–∞–∫–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞, –∫–æ–≥–¥–∞ –∏ –≤–æ —Å–∫–æ–ª—å–∫–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ \" –£—Å–ª—É–≥–∞; –ú–∞—Å—Ç–µ—Ä; –î–∞—Ç–∞; –í—Ä–µ–º—è \", –∞ –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞–∫–∏–µ —Ç–æ –∏–∑ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Ç–æ –≤—Å—Ç–∞–≤–ª—è–π \"NA\" –≤ —Å—Ç—Ä–æ–∫—É –Ω–∞ –º–µ—Å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é–∑–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞" + user_message)
        response = openai.responses.create(
            model="gpt-4o",
            input=prompt    
        )
        return response.output_text
     except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT:", e)
        return "error"

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(phone, text):
    url = f"https://api.green-api.com/waInstance{GREEN_API_ID}/sendMessage/{GREEN_API_TOKEN}"
    payload = {
        "chatId": f"{phone}@c.us",
        "message": text
    }
    response = requests.post(url, json=payload)
    print(f"–û—Ç–≤–µ—Ç –æ—Ç Green API: {response.status_code} - {response.text}")

# ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
def ask_chatgpt(user_message):
    try:
        response = openai.responses.create(
            model="gpt-4o",
            input=[
                {"role": "system", "content": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –ü–æ–º–æ–≥–∞–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, —É—Ç–æ—á–Ω—è–µ—à—å –¥–µ—Ç–∞–ª–∏, –æ—Ç–≤–µ—á–∞–µ—à—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."},
                {"role": "user", "content": user_message}
            ]
        )
#        return response.choices[0].message["content"].strip()
        return response.output_text
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT:", e)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –ú–æ—Å–∫–≤–µ –±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–≤—è–∑—å—é, —Å–º–æ–≥—É –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ. –ù–µ –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json()
        print("\nüü° Webhook —Å—Ä–∞–±–æ—Ç–∞–ª!")
        print("üîç JSON:", data)
        
        if data.get("typeWebhook") != "incomingMessageReceived":
            print("üîÉ –≠—Ç–æ –Ω–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return "Ignored", 200
        
        message = data['messageData']['textMessageData']['textMessage']
        phone = data['senderData']['chatId'].replace("@c.us", "")

        print(find_book_request_in_message(message))

        reply = ask_chatgpt(message)
        send_message(phone, reply)

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", e)
    return "OK", 200

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!", 200

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)

